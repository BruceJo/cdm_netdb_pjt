# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import test_proto_pb2 as test__proto__pb2


class BookServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBook = channel.unary_unary(
                '/com.book.BookService/GetBook',
                request_serializer=test__proto__pb2.GetBookRequest.SerializeToString,
                response_deserializer=test__proto__pb2.Book.FromString,
                )
        self.GetBooksViaAuthor = channel.unary_stream(
                '/com.book.BookService/GetBooksViaAuthor',
                request_serializer=test__proto__pb2.GetBookViaAuthor.SerializeToString,
                response_deserializer=test__proto__pb2.Book.FromString,
                )
        self.GetGreatestBook = channel.stream_unary(
                '/com.book.BookService/GetGreatestBook',
                request_serializer=test__proto__pb2.GetBookRequest.SerializeToString,
                response_deserializer=test__proto__pb2.Book.FromString,
                )
        self.GetBooks = channel.stream_stream(
                '/com.book.BookService/GetBooks',
                request_serializer=test__proto__pb2.GetBookRequest.SerializeToString,
                response_deserializer=test__proto__pb2.Book.FromString,
                )


class BookServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBooksViaAuthor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGreatestBook(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBooks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBook': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBook,
                    request_deserializer=test__proto__pb2.GetBookRequest.FromString,
                    response_serializer=test__proto__pb2.Book.SerializeToString,
            ),
            'GetBooksViaAuthor': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBooksViaAuthor,
                    request_deserializer=test__proto__pb2.GetBookViaAuthor.FromString,
                    response_serializer=test__proto__pb2.Book.SerializeToString,
            ),
            'GetGreatestBook': grpc.stream_unary_rpc_method_handler(
                    servicer.GetGreatestBook,
                    request_deserializer=test__proto__pb2.GetBookRequest.FromString,
                    response_serializer=test__proto__pb2.Book.SerializeToString,
            ),
            'GetBooks': grpc.stream_stream_rpc_method_handler(
                    servicer.GetBooks,
                    request_deserializer=test__proto__pb2.GetBookRequest.FromString,
                    response_serializer=test__proto__pb2.Book.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.book.BookService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BookService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.book.BookService/GetBook',
            test__proto__pb2.GetBookRequest.SerializeToString,
            test__proto__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBooksViaAuthor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.book.BookService/GetBooksViaAuthor',
            test__proto__pb2.GetBookViaAuthor.SerializeToString,
            test__proto__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGreatestBook(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.book.BookService/GetGreatestBook',
            test__proto__pb2.GetBookRequest.SerializeToString,
            test__proto__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBooks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.book.BookService/GetBooks',
            test__proto__pb2.GetBookRequest.SerializeToString,
            test__proto__pb2.Book.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
